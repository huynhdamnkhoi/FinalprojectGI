<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT
// State
enum player_states{
    idle, // 0
    move, 
    crouch,
    roll,
    jump, // 4
}

// Movement
grav = 0.6
moveX = 0
moveY = 0
nor_spd = 3
run_spd = 5

// Init state
state = player_states.idle
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controller
// State Controller
switch (state) {
    case (player_states.idle):
        scr_player_idle();
        break;
    case (player_states.move):
        scr_player_move();
        break;
    case (player_states.jump):
        scr_player_jump();
        break;
    case (player_states.roll):
        scr_player_roll();
        break;
    case (player_states.crouch):
        scr_player_crouch();
        break;
}

// Physics
if (moveY &lt; 10) {
    moveY = min(moveY + grav, 9)
}

// Collision Check
if (place_meeting(x, y + moveY, obj_ground)) {
    repeat(abs(moveY)) {
        if (not place_meeting(x, y + sign(moveY), obj_ground)) {
            y += sign(moveY)
        }
    }
    moveY = 0
}

// Sprite Check
if (input_left + input_right != 0 and input_left + input_right != 2) {
    image_xscale = sign(input_right - input_left)
}

// Apply Movement
x += moveX
y += moveY
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
